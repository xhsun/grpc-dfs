// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: dfs/dfs.proto

package dfs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileTransferClient is the client API for FileTransfer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileTransferClient interface {
	// Store files on the server
	Store(ctx context.Context, opts ...grpc.CallOption) (FileTransfer_StoreClient, error)
	// Fetch files from the server
	Fetch(ctx context.Context, in *FileName, opts ...grpc.CallOption) (FileTransfer_FetchClient, error)
	// Delete files from the server
	Delete(ctx context.Context, in *FileName, opts ...grpc.CallOption) (*Empty, error)
	// List all files on the server
	ListAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FileList, error)
}

type fileTransferClient struct {
	cc grpc.ClientConnInterface
}

func NewFileTransferClient(cc grpc.ClientConnInterface) FileTransferClient {
	return &fileTransferClient{cc}
}

func (c *fileTransferClient) Store(ctx context.Context, opts ...grpc.CallOption) (FileTransfer_StoreClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileTransfer_ServiceDesc.Streams[0], "/dfs.FileTransfer/Store", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileTransferStoreClient{stream}
	return x, nil
}

type FileTransfer_StoreClient interface {
	Send(*File) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type fileTransferStoreClient struct {
	grpc.ClientStream
}

func (x *fileTransferStoreClient) Send(m *File) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileTransferStoreClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileTransferClient) Fetch(ctx context.Context, in *FileName, opts ...grpc.CallOption) (FileTransfer_FetchClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileTransfer_ServiceDesc.Streams[1], "/dfs.FileTransfer/Fetch", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileTransferFetchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileTransfer_FetchClient interface {
	Recv() (*FileContent, error)
	grpc.ClientStream
}

type fileTransferFetchClient struct {
	grpc.ClientStream
}

func (x *fileTransferFetchClient) Recv() (*FileContent, error) {
	m := new(FileContent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileTransferClient) Delete(ctx context.Context, in *FileName, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dfs.FileTransfer/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileTransferClient) ListAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FileList, error) {
	out := new(FileList)
	err := c.cc.Invoke(ctx, "/dfs.FileTransfer/ListAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileTransferServer is the server API for FileTransfer service.
// All implementations must embed UnimplementedFileTransferServer
// for forward compatibility
type FileTransferServer interface {
	// Store files on the server
	Store(FileTransfer_StoreServer) error
	// Fetch files from the server
	Fetch(*FileName, FileTransfer_FetchServer) error
	// Delete files from the server
	Delete(context.Context, *FileName) (*Empty, error)
	// List all files on the server
	ListAll(context.Context, *Empty) (*FileList, error)
	mustEmbedUnimplementedFileTransferServer()
}

// UnimplementedFileTransferServer must be embedded to have forward compatible implementations.
type UnimplementedFileTransferServer struct {
}

func (UnimplementedFileTransferServer) Store(FileTransfer_StoreServer) error {
	return status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedFileTransferServer) Fetch(*FileName, FileTransfer_FetchServer) error {
	return status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedFileTransferServer) Delete(context.Context, *FileName) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedFileTransferServer) ListAll(context.Context, *Empty) (*FileList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAll not implemented")
}
func (UnimplementedFileTransferServer) mustEmbedUnimplementedFileTransferServer() {}

// UnsafeFileTransferServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileTransferServer will
// result in compilation errors.
type UnsafeFileTransferServer interface {
	mustEmbedUnimplementedFileTransferServer()
}

func RegisterFileTransferServer(s grpc.ServiceRegistrar, srv FileTransferServer) {
	s.RegisterService(&FileTransfer_ServiceDesc, srv)
}

func _FileTransfer_Store_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileTransferServer).Store(&fileTransferStoreServer{stream})
}

type FileTransfer_StoreServer interface {
	SendAndClose(*Empty) error
	Recv() (*File, error)
	grpc.ServerStream
}

type fileTransferStoreServer struct {
	grpc.ServerStream
}

func (x *fileTransferStoreServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileTransferStoreServer) Recv() (*File, error) {
	m := new(File)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileTransfer_Fetch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileName)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileTransferServer).Fetch(m, &fileTransferFetchServer{stream})
}

type FileTransfer_FetchServer interface {
	Send(*FileContent) error
	grpc.ServerStream
}

type fileTransferFetchServer struct {
	grpc.ServerStream
}

func (x *fileTransferFetchServer) Send(m *FileContent) error {
	return x.ServerStream.SendMsg(m)
}

func _FileTransfer_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransferServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dfs.FileTransfer/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransferServer).Delete(ctx, req.(*FileName))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileTransfer_ListAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransferServer).ListAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dfs.FileTransfer/ListAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransferServer).ListAll(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// FileTransfer_ServiceDesc is the grpc.ServiceDesc for FileTransfer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileTransfer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dfs.FileTransfer",
	HandlerType: (*FileTransferServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _FileTransfer_Delete_Handler,
		},
		{
			MethodName: "ListAll",
			Handler:    _FileTransfer_ListAll_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Store",
			Handler:       _FileTransfer_Store_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Fetch",
			Handler:       _FileTransfer_Fetch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dfs/dfs.proto",
}
