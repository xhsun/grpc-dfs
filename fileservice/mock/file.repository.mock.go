// Code generated by mockery v2.12.3. DO NOT EDIT.

package mock

import (
	os "os"

	mock "github.com/stretchr/testify/mock"
)

// FileRepositoryMock is an autogenerated mock type for the IFileRepository type
type FileRepositoryMock struct {
	mock.Mock
}

// Close provides a mock function with given fields: file
func (_m *FileRepositoryMock) Close(file *os.File) {
	_m.Called(file)
}

// FullFilePath provides a mock function with given fields: filename
func (_m *FileRepositoryMock) FullFilePath(filename string) (string, error) {
	ret := _m.Called(filename)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(filename)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: path
func (_m *FileRepositoryMock) List(path string) (map[string]uint64, error) {
	ret := _m.Called(path)

	var r0 map[string]uint64
	if rf, ok := ret.Get(0).(func(string) map[string]uint64); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]uint64)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Open provides a mock function with given fields: path, flag
func (_m *FileRepositoryMock) Open(path string, flag int) (*os.File, error) {
	ret := _m.Called(path, flag)

	var r0 *os.File
	if rf, ok := ret.Get(0).(func(string, int) *os.File); ok {
		r0 = rf(path, flag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*os.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(path, flag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Read provides a mock function with given fields: file
func (_m *FileRepositoryMock) Read(file *os.File) ([]byte, error) {
	ret := _m.Called(file)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(*os.File) []byte); ok {
		r0 = rf(file)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*os.File) error); ok {
		r1 = rf(file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: path
func (_m *FileRepositoryMock) Remove(path string) error {
	ret := _m.Called(path)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Sync provides a mock function with given fields: file
func (_m *FileRepositoryMock) Sync(file *os.File) {
	_m.Called(file)
}

// Write provides a mock function with given fields: file, data
func (_m *FileRepositoryMock) Write(file *os.File, data []byte) (int, error) {
	ret := _m.Called(file, data)

	var r0 int
	if rf, ok := ret.Get(0).(func(*os.File, []byte) int); ok {
		r0 = rf(file, data)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*os.File, []byte) error); ok {
		r1 = rf(file, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewFileRepositoryMockT interface {
	mock.TestingT
	Cleanup(func())
}

// NewFileRepositoryMock creates a new instance of FileRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFileRepositoryMock(t NewFileRepositoryMockT) *FileRepositoryMock {
	mock := &FileRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
