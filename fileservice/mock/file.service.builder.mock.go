// Code generated by mockery v2.12.3. DO NOT EDIT.

package mock

import (
	mock "github.com/stretchr/testify/mock"
	fileservice "github.com/xhsun/grpc-file-transfer/fileservice"
)

// FileServiceBuilderMock is an autogenerated mock type for the IFileServiceBuilder type
type FileServiceBuilderMock struct {
	mock.Mock
}

// Build provides a mock function with given fields:
func (_m *FileServiceBuilderMock) Build() (fileservice.IFileService, error) {
	ret := _m.Called()

	var r0 fileservice.IFileService
	if rf, ok := ret.Get(0).(func() fileservice.IFileService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fileservice.IFileService)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithFile provides a mock function with given fields: filename, flag
func (_m *FileServiceBuilderMock) WithFile(filename string, flag int) fileservice.IFileServiceBuilder {
	ret := _m.Called(filename, flag)

	var r0 fileservice.IFileServiceBuilder
	if rf, ok := ret.Get(0).(func(string, int) fileservice.IFileServiceBuilder); ok {
		r0 = rf(filename, flag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fileservice.IFileServiceBuilder)
		}
	}

	return r0
}

// WithFileName provides a mock function with given fields: filename
func (_m *FileServiceBuilderMock) WithFileName(filename string) fileservice.IFileServiceBuilder {
	ret := _m.Called(filename)

	var r0 fileservice.IFileServiceBuilder
	if rf, ok := ret.Get(0).(func(string) fileservice.IFileServiceBuilder); ok {
		r0 = rf(filename)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fileservice.IFileServiceBuilder)
		}
	}

	return r0
}

type NewFileServiceBuilderMockT interface {
	mock.TestingT
	Cleanup(func())
}

// NewFileServiceBuilderMock creates a new instance of FileServiceBuilderMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFileServiceBuilderMock(t NewFileServiceBuilderMockT) *FileServiceBuilderMock {
	mock := &FileServiceBuilderMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
