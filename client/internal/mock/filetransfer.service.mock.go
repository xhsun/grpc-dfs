// Code generated by mockery v2.12.3. DO NOT EDIT.

package mock

import mock "github.com/stretchr/testify/mock"

// FileTransferServiceMock is an autogenerated mock type for the IFileTransferService type
type FileTransferServiceMock struct {
	mock.Mock
}

// DeleteFromServer provides a mock function with given fields: fileName
func (_m *FileTransferServiceMock) DeleteFromServer(fileName string) error {
	ret := _m.Called(fileName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(fileName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Download provides a mock function with given fields: serverFileName, localFileName
func (_m *FileTransferServiceMock) Download(serverFileName string, localFileName string) error {
	ret := _m.Called(serverFileName, localFileName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(serverFileName, localFileName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServerFileList provides a mock function with given fields:
func (_m *FileTransferServiceMock) ServerFileList() (map[string]uint64, error) {
	ret := _m.Called()

	var r0 map[string]uint64
	if rf, ok := ret.Get(0).(func() map[string]uint64); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]uint64)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upload provides a mock function with given fields: fileName
func (_m *FileTransferServiceMock) Upload(fileName string) error {
	ret := _m.Called(fileName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(fileName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type NewFileTransferServiceMockT interface {
	mock.TestingT
	Cleanup(func())
}

// NewFileTransferServiceMock creates a new instance of FileTransferServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFileTransferServiceMock(t NewFileTransferServiceMockT) *FileTransferServiceMock {
	mock := &FileTransferServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
