// Code generated by mockery v2.12.3. DO NOT EDIT.

package mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	dfs "github.com/xhsun/grpc-file-transfer/dfs"
)

// FileTransferRepositoryMock is an autogenerated mock type for the IFileTransferRepository type
type FileTransferRepositoryMock struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, fileName
func (_m *FileTransferRepositoryMock) Delete(ctx context.Context, fileName string) error {
	ret := _m.Called(ctx, fileName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, fileName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Download provides a mock function with given fields: stream
func (_m *FileTransferRepositoryMock) Download(stream dfs.FileTransfer_FetchClient) ([]byte, int, error) {
	ret := _m.Called(stream)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(dfs.FileTransfer_FetchClient) []byte); ok {
		r0 = rf(stream)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(dfs.FileTransfer_FetchClient) int); ok {
		r1 = rf(stream)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(dfs.FileTransfer_FetchClient) error); ok {
		r2 = rf(stream)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DownloadStream provides a mock function with given fields: ctx, fileName
func (_m *FileTransferRepositoryMock) DownloadStream(ctx context.Context, fileName string) (dfs.FileTransfer_FetchClient, error) {
	ret := _m.Called(ctx, fileName)

	var r0 dfs.FileTransfer_FetchClient
	if rf, ok := ret.Get(0).(func(context.Context, string) dfs.FileTransfer_FetchClient); ok {
		r0 = rf(ctx, fileName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dfs.FileTransfer_FetchClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, fileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServerFileList provides a mock function with given fields: ctx
func (_m *FileTransferRepositoryMock) ServerFileList(ctx context.Context) (map[string]uint64, error) {
	ret := _m.Called(ctx)

	var r0 map[string]uint64
	if rf, ok := ret.Get(0).(func(context.Context) map[string]uint64); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]uint64)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upload provides a mock function with given fields: stream, fileName, fileChunk
func (_m *FileTransferRepositoryMock) Upload(stream dfs.FileTransfer_StoreClient, fileName string, fileChunk []byte) error {
	ret := _m.Called(stream, fileName, fileChunk)

	var r0 error
	if rf, ok := ret.Get(0).(func(dfs.FileTransfer_StoreClient, string, []byte) error); ok {
		r0 = rf(stream, fileName, fileChunk)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadClose provides a mock function with given fields: stream
func (_m *FileTransferRepositoryMock) UploadClose(stream dfs.FileTransfer_StoreClient) error {
	ret := _m.Called(stream)

	var r0 error
	if rf, ok := ret.Get(0).(func(dfs.FileTransfer_StoreClient) error); ok {
		r0 = rf(stream)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadStream provides a mock function with given fields: ctx
func (_m *FileTransferRepositoryMock) UploadStream(ctx context.Context) (dfs.FileTransfer_StoreClient, error) {
	ret := _m.Called(ctx)

	var r0 dfs.FileTransfer_StoreClient
	if rf, ok := ret.Get(0).(func(context.Context) dfs.FileTransfer_StoreClient); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dfs.FileTransfer_StoreClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewFileTransferRepositoryMockT interface {
	mock.TestingT
	Cleanup(func())
}

// NewFileTransferRepositoryMock creates a new instance of FileTransferRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFileTransferRepositoryMock(t NewFileTransferRepositoryMockT) *FileTransferRepositoryMock {
	mock := &FileTransferRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
